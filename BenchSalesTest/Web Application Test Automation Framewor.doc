Web Application Test Automation Framework Documentation
1. Project Overview
    This is an automated testing framework that combines web crawling and Playwright to generate and execute test cases for web applications. It's particularly useful for applications with limited documentation, as it automatically discovers and tests interactive elements.
2. Architecture
    2.1 Core Components
        1.Test Framework (test_framework.py)
            Main orchestrator for web crawling
            Handles browser automation using Playwright
            Collects data about web elements and interactions
            Manages authentication and navigation
        2.Test Generator (test_generator.py)
            Processes crawled data
            Generates Playwright test cases
            Uses Jinja2 templating for test file generation
            Creates both click-based and form-based tests
        3.Configuration (config.py)
            Centralizes configuration settings
            Manages URLs and credentials
            Provides environment-specific settings
        4.AI Integration (ai_wrapper.py)
            Provides AI-powered test generation capabilities
            Enhances test scenario creation
            Integrates with the main framework
    2.2 Data Flow
        Crawling Phase
            User Input → Test Framework → Web Crawling → Data Collection → JSON Storage
        Test Generation Phase
            Crawled Data → Test Generator → Template Processing → Test File Generation
        Test Execution Phase
            Generated Tests → Playwright → Test Execution → Results Reporting
3. Detailed Component Descriptions
    3.1 WebAppTestFramework
        Purpose: Main class for web crawling and data collection
        Key Methods:
            setup(): Initializes Playwright and browser
            crawl_page(): Collects element data from specific pages
            login(): Handles authentication
            crawl_application(): Orchestrates the crawling process
            cleanup(): Handles resource cleanup
    3.2 PlaywrightTestGenerator
        Purpose: Generates test cases from crawled data
        Key Methods:
            load_test_scenarios(): Loads crawled data
            generate_test_name(): Creates unique test names
            generate_tests(): Main test generation logic
            _generate_test_file(): Creates test files using templates

4. Test Types  
    4.1 Click-based Tests
        Tests for buttons, links, and other clickable elements
        Verifies element visibility and interaction
        Includes navigation tests
    4.2 Form-based Tests
        Tests for input fields, checkboxes, and select elements
        Handles different input types (text, email, password)
        Includes form submission tests

5. Project Structure
        
    ├── requirements.txt          # Project dependencies
    ├── test_framework.py        # Main framework implementation
    ├── test_generator.py        # Test case generator
    ├── ai_wrapper.py           # AI integration
    ├── config.py               # Configuration settings
    ├── test_data/             # Crawled data storage
    │   ├── crawled_data.json  # Raw crawled data
    │   └── test_scenarios.json # Generated test scenarios
    ├── generated_tests/       # Generated test files
    │   ├── test_clicks.py    # Click-based tests
    │   └── test_forms.py     # Form-based tests
    └── test-results/         # Test execution results


6. Usage Flow
    Setup
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
        playwright install
    Configuration
        Update config.py with target application details
        Set up credentials and URLs
    Crawling
        python test_framework.py
    Test Generation
        python test_generator.py
    Test Execution
        pytest generated_tests/


7. Best Practices
    1.Crawling
        Run crawler in non-headless mode for debugging
        Use appropriate delays between actions
        Handle authentication properly
    2.Test Generation
        Customize test templates as needed
        Add specific assertions for each test case
        Maintain test naming conventions
    3.Maintenance
        Keep dependencies updated
        Regularly update test templates
        Monitor test coverage

8. Extensibility
    The framework can be extended by:
    Adding new test templates
    Implementing custom crawling strategies
    Enhancing AI integration
    Adding new test types
    Customizing reporting

This documentation provides a comprehensive overview of the project's architecture and flow. The framework is designed to be modular and extensible, allowing for easy adaptation to different web applications and testing requirements.

=>STEPS TO FOLLOW :-

1.Initial Setup Files
    requirements.txt - Install all dependencies
    config.py - Configure your application settings
2.Main Execution Files (in order)
    a.Crawling Phase
        test_framework.py - This is the first file to run. It will:
        Crawl your web application
        Collect data about elements and interactions
        Save the data to test_data/crawled_data.json
    b.Test Generation Phase
    test_generator.py - This is the second file to run. It will:
        Read the crawled data from test_data/crawled_data.json
        Generate test files in the generated_tests/ directory
        Create two main test files:
            generated_tests/test_clicks.py (for click-based interactions)
            generated_tests/test_forms.py (for form-based interactions)
    c.Test Execution Phase
        pytest command to run the generated tests

->Here's the complete sequence of commands you need to run:
    # 1. Setup environment and install dependencies
    python -m venv venv
    source venv/bin/activate  # On Windows: venv\Scripts\activate
    pip install -r requirements.txt
    playwright install

    # 2. Configure your application (edit config.py)
    # Update the following in config.py:
    # - BASE_URL
    # - LOGIN_URL
    # - DASHBOARD_URL
    # - CREDENTIALS

    # 3. Run the crawler
    python test_framework.py

    # 4. Generate test cases
    python test_generator.py

    # 5. Run the generated tests
    pytest generated_tests/

->Additional Supporting Files:
    ai_wrapper.py - Used internally by the framework for AI-powered test generation
    test_generator_gherkin.py - Alternative test generator that creates Gherkin-style tests
    pytest.ini - Configuration for pytest
->The main flow is:
    First run test_framework.py to crawl your application
    Then run test_generator.py to create the tests
    Finally run the tests using pytest
->Make sure you have properly configured config.py before starting the process, as it contains essential    settings like:
    Base URL of your application
    Login credentials
    URLs for different pages
    Other application-specific configurations